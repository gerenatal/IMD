library ieee;
use ieee.std_logic_1164.all;

entity contador is
port(
	clockcont, s, enable, reset : in std_logic;
	--qc : out std_logic_vector(2 downto 0);
	d : out std_logic_vector(6 downto 0);
);
end contador;

architecture contador of contador is

component flipflopJK is
port(
	J, K, clk, clear, preset: in std_logic;
	Q, Qbar : out std_logic
);
end component;

signal ds : std_logic_vector(6 downto 0);
signal qs : std_logic_vector(2 downto 0);
signal js : std_logic_vector(2 downto 0);
signal ks : std_logic_vector(2 downto 0);

signal ja : std_logic_vector(2 downto 0);
signal ka : std_logic_vector(2 downto 0);
signal jb : std_logic_vector(2 downto 0);
signal kb : std_logic_vector(2 downto 0);

signal jd : std_logic_vector(2 downto 1);
signal kd : std_logic_vector(2 downto 1);
signal jc : std_logic_vector(2 downto 1);
signal kc : std_logic_vector(2 downto 1);

signal jk : std_logic_vector(2 downto 1);
signal kj : std_logic_vector(2 downto 1);

signal sc : std_logic_vector(2 downto 0);
signal ss, es, rs, rsa : std_logic;

begin

	FF00 : flipflopJK port map (js(0), ks(0), clockcont, '1', '1', qs(0));
	FF01 : flipflopJK port map (js(1), ks(1), clockcont, '1', '1', qs(1));
	FF02 : flipflopJK port map (js(2), ks(2), clockcont, '1', '1', qs(2));
	
	jd(2) <= not ss and jk(2);
	kc(2) <= ss and jk(2);
	kd(2) <= not ss and kj(2);
	jc(2) <= ss and kj(2);
	jd(1) <= not ss and jk(1);
	kc(1) <= ss and jk(1);
	kd(1) <= not ss and kj(1);
	jc(1) <= ss and kj(1);
	
	ja(2) <= jd(2) or jc(2);
	ka(2) <= kd(2) or kc(2);
	ja(1) <= jd(1) or jc(1);
	ka(1) <= kd(1) or kc(1);
	ja(0) <= qs(0);
	ka(0) <= not qs(0);
	
	js(2) <= not es and qs(2) or es and ja(2);
	ks(2) <= not es and not qs(2) or es and ka(2);
	js(1) <= not es and qs(1) or es and ja(1);
	ks(1) <= not es and not qs(2) or es and ka(1);
	js(0) <= not es and qs(0) or es and ja(0);
	js(0) <= not es and not qs(0) or es and ka(0);

	jk(2) <= qs(2) or qs(1) or qs(0);
	kj(2) <= not qs(2) or qs(1) or qs(0);
	jk(1) <= not qs(1) and qs(0);
	kj(1) <= qs(1) and qs(0);
		
	sc(2) <= not ss xor (not rsa and qs(2));
	sc(1) <= not ss xor (not rsa and qs(1));
	sc(0) <= not ss xor (not rsa and qs(0));
	
	rsa <= rs and not es;

	--qc <= qs;
	s <= ss;
	enable <= es;
	reset <= rs;
	
	ds(0) <= not( qs(2) and qs(0) or not qs(2) and not qs(0) or qs(1));
	ds(1) <= not( not qs(1) and qs(0) or qs(1) and qs(0) or not qs(2));
	ds(2) <= not( qs(2) or not qs(1) or qs(0));
	ds(3) <= not( qs(2) and not qs(1) and qs(0) or not qs(2) and not qs(0) or qs(1) and not qs(0) or not qs(2) and qs(1));
	ds(4) <= not( not qs(2) and not qs(0) or qs(1) and not qs(0));
	ds(5) <= not( not qs(1) and not qs(0) or qs(2) and not qs(0) or qs(2) and not qs(1));
	ds(6) <= not( qs(2) xor qs(1) or not qs(0) and (qs(2) or q(1)));
	d <= ds;
	
end contador;
